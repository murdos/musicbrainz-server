: macro favicon_class -> $url {
:      if match($url.url.host, rx('amazon'))              { 'amazon' }
: else if match($url.url.host, rx('allmusic.com'))        { 'allmusic' }
: else if match($url.url.host, rx('wikipedia.org$'))      { 'wikipedia' }
: else if match($url.url.host, rx('facebook.com'))        { 'facebook' }
: else if match($url.url.host, rx('last.fm'))             { 'lastfm' }
: else if match($url.url.host, rx('myspace.com'))         { 'myspace' }
: else if match($url.url.host, rx('twitter.com'))         { 'twitter' }
: else if match($url.url.host, rx('youtube.com'))         { 'youtube' }
: else if match($url.url.host, rx('discogs.com'))         { 'discogs' }
: else if match($url.url.host, rx('secondhandsongs.com')) { 'secondhandsongs' }
: else if match($url.url.host, rx('songfacts.com'))       { 'songfacts' }
: else if match($url.url.host, rx('soundcloud.com'))      { 'soundcloud' }
: else                                                    { '' }
: }

: macro display_favicon -> $url, $text, $class {
  <li class="<: $class :>">
    <a href="<: $url.url :>"><: $text :></a>
  </li>
: }

: macro display_favicons -> $entity, $empty {
:   my $favicons = $entity.relationships_by_type('url')
:   my $homepage_relationships = $entity.relationships_by_link_type_names('official homepage', 'official site');
:   for $homepage_relationships -> $favicon {
:     display_favicon($favicon.target, l('Official homepage'), 'home');
:   }
:
:   for $favicons -> $favicon {
:     if $favicon.target.does('MusicBrainz::Server::Entity::URL::Sidebar') &&
:        $favicon.target.show_in_sidebar {
:       display_favicon($favicon.target, $favicon.target.sidebar_name, favicon_class($favicon.target));
:     }
:   }
: }


: macro artist_credit -> $credit {
:   for $credit.names -> $name {
:     raw('<a href="') ~ html($c.uri_for_action('/artist/show', [ $name.artist.gid ])) ~ raw('">');
:     html($name.name);
:     raw('</a>');
:     html($name.join_phrase);
:   }
: }

: macro grouped_relationships -> $relationships {
  <dd>
    : for $relationships -> $entity {
    :   link_entity($entity.target);
    :   if !$~entity.is_last {
    :     html(', ')
    :   }
    : }
  </dd>
: }

: cascade layout
: override content -> {
<style>
  table.tbl td { vertical-align: top }

  dl.ars, dl.ars dd, dl.ars dt {
      padding: 0;
      margin: 0;
      font-size: 11px;
  }

  dl.ars { margin-left: 2em; }
  dl.ars dd { margin: 0.2em 0; }

  dl.ars dt {
      margin-right: 0.5em;
      clear: left;
      float: left;
      color: #555;
  }
</style>

<div class="releaseheader">
  <h1><: link_entity($release) :></h1>
  <p class="subheader">
    <span class="prefix">~</span>
    Release by <: artist_credit($release.artist_credit) :>
      <span class="small">
        (<a href="">see all versions of this release,
          <: $release.release_group.release_count :> available</a>)
      </span>
  </p>
</div>

: macro tab -> $page, $name, $opts {
  <li class="<: $opts['selected'] ? 'sel' : '' :>">
    <a href="<: $c.uri_for_action($page, [ $release.gid ]) :>"><: $name :></a>
  </li>
: }

<div class="tabs">
  <ul>
    : tab('/release/show', 'Release', { selected => 1 })
    : tab('/release/relationships', 'Relationships', {})
    : tab('/release/discids', 'Disc IDs', {})
    : tab('/release/tags', 'Tags', {})
    : tab('/release/details', 'Details', {})
    : tab('/release_editor/edit', 'Edit', {})
  </ul>
</div>

: macro rating_tooltip -> $rating {
:   if $rating == 0 {
:     l('Remove your rating');
:   }
:   else {
:     ln('Rate: {rating} star', 'Rate: {rating} stars', $rating, { rating => $rating });
:   }
: }

: macro rating_rate_url -> $entity, $rating {
:   $c.uri_for_action("/rating/rate", {
:       entity_type => entity_type($entity),
:       entity_id   => $entity.id,
:       rating      => $rating * 20,
:   });
: }

: macro rating_stars -> $entity, $prevent_rating {
  <span class="inline-rating">
    <span class="star-rating small-star">
      : my $current_star_rating = $entity.user_rating ? 5 * $entity.user_rating / 100 : 0;
      : if $entity.user_rating {
          <span class="current-user-rating" style="width:<: $entity.user_rating :>%;"><: $current_star_rating :></span>
      : }
      : else if $entity.rating_count {
          <span class="current-rating" style="width:<: $entity.rating :>%;"><: 5 * $entity.rating / 100 :></span>
      : }
      : if $c.user_exists && !$prevent_rating {
      :   for [1..5] -> $rating {
      :     if $rating == $current_star_rating {
              <a href="<: rating_rate_url($entity, 0) :>" class="stars-<: $rating :> remove-rating"
                 title="<: rating_tooltip (0) :>"><: $rating :></a>
      :     }
      :     else {
              <a href="<: rating_rate_url($entity, $rating) :>" class="stars-<: $rating :> set-rating"
                 title="<: rating_tooltip ($rating) :>"><: $rating :></a>
      :     }
      :   }
      : }
    </span>
  </span>
: }

: my $annotation = $release.latest_annotation;
: if $annotation.text || $number_of_revisions > 1 {
    <h2><: l('Annotation') :></h2>
    <div class="annotation">
      <div class="annotation-body">
        : raw(format_wikitext($annotation.summary));
        : if $annotation.summary_is_short {
          <p><a href="<: $c.uri_for($c.controller.action_for('latest_annotation'), [ $entity.gid ]) :>">
            <: l('Read moreâ€¦') :></a></p>
        : }
      </div>
      <div class="annotation-details">
        : if $c.user_exists {
        :   raw(l('Annotation last modified by {user} on {date}.', {
        :       user => link_entity($annotation.editor),
        :       date => format_user_date($c.user, $annotation.creation_date),
        :   }));
        :   if $number_of_revisions > 1 {
              <a href="<: $c.uri_for_action($c.controller.action_for('annotation_history'), [ $entity.gid ]) :>">
                <: l('View annotation history') :>
              </a>
        :   }
        : }
        : else {
        :   l('Annotation last modified on {date}.', {
        :       date => format_user_date($c.user, $annotation.creation_date),
        :   });
        : }
      </div>
    </div>
: }

<h2>Tracklist</h2>
<table class="tbl">
  <thead>
    <tr>
      <th class="pos t">#</th>
      <th>Title</th>
      : if $show_artists {
          <th>Artist</th>
      : }
      <th class="rating c">Rating</th>
      <th class="treleases">Length</th>
    </tr>
  </thead>
  <tbody>
  : for $release.mediums -> $medium {
    <tr class="subh">
      <td> </td>
      <td colspan="4">
        <a href="<: $c.uri_for_action('/tracklist/show', [ $medium.tracklist.id ]) :>">
          <: html($medium.format_name) || l("Medium") :>
          : html($medium.position);
          : if $medium.name { raw(': ') ~ $medium.name }
        </a>
      </td>
    </tr>
    : for $medium.tracklist.tracks -> $track {
    <tr class="<: $~track.cycle('odd', 'ev') :>">
      <td class="pos t"><: $track.position :></td>
      <td>
        <: link_entity($track) :>
        : if $track.recording.relationships {
          <br />
          <div class="ars">
          : for $track.recording.grouped_relationships.kv() -> $rel_pair {
            <dl class="ars">
            : if $rel_pair.key == 'work' {
            :   for $rel_pair.value.kv() -> $group {
            :     for $group.value -> $rel {
                    <dt><: $group.key :>:</dt>
                    <dd>
                      <: link_entity($rel.target) :>
                      : for $rel.target.grouped_relationships('artist').kv() -> $work_rel_type {
                        <dl class="ars">
                        : for $work_rel_type.value.kv() -> $work_rel_group {
                          <dt><: $work_rel_group.key :>:</dt>
                          <: grouped_relationships($work_rel_group.value) :>
                        : }
                        </dl>
                      : }
                    </dd>
            :     }
            :   }
            : }
            : else {
            :  for $rel_pair.value.kv() -> $group {
                 <dt><: $group.key :>:</dt>
                 <: grouped_relationships($group.value) :>
            :  }
            : }
            </dl>
          : }
          </div>
        : }
      </td>
      : if $show_artists {
          <td><: artist_credit($track.artist_credit) :></td>
      : }
      <td><: rating_stars($track.recording, 0) :></td>
      <td><: $track.length | format_duration :></td>
    </tr>
    : }
  : }
  </tbody>
</table>

<h2>Relationships</h2>
: for $release.grouped_relationships().kv() -> $rel_group {
<table class="details" style="width: 100%">
  <tbody>
    : for $rel_group.value.kv() -> $rel_type {
    <tr>
      <th><: $rel_type.key :>:</th>
      <td>
        : for $rel_type.value -> $relationship {
          <span>
            <: link_entity($relationship.target) :>
            <span style="float: right">
              [
                <a href="<: $c.uri_for_action('/edit/relationship/delete', {
                                type0 => $relationship.link.type.entity0_type,
                                type1 => $relationship.link.type.entity1_type,
                                id => $relationship.id,
                                returnto => html($c.req.uri)
                            }) :>"><: l('Remove') :></a>
              |
                <a href="<: $c.uri_for_action('/edit/relationship/edit', {
                                type0 => $relationship.link.type.entity0_type,
                                type1 => $relationship.link.type.entity1_type,
                                id => $relationship.id,
                                returnto => html($c.req.uri)
                            }) :>"><: l('Edit') :></a>
              ]
            </span>
          </span>
          <br />
        : }
      </td>
    </tr>
    : }
  </tbody>
</table>
: }
: else {
<p><: link_entity($release) :> has no relationships.</p>
: }

: }

: override sidebar -> {
<div class="cover-art">
  : if $release.cover_art_url {
    <img src="<: $release.cover_art_url :>" alt="<: l('Cover Art') :>" />
  : }
  : else {
    <em><: l('No cover image available.') :></em>
  : }
</div>

: macro property -> $key, $value {
:   if $value {
      <dt><: $key :></dt>
      <dd><: $value :></dd>
:   }
: }

: macro quality_name -> $quality {
:   given $quality {
:     when 0 { html('Low') }
:     when 1 { html('Normal') }
:     when 2 { html('High') }
:   }
: }

<h2><: l('Release information') :></h2>
<dl class="properties">
  : property(l('Date:'), $release.date.format);
  : property(l('Country:'), $release.country.name);
  : property(l('Barcode:'), $release.barcode);
  : property(l('Format:'), $release.combined_format_name);
</dl>

<h2><: l('Additional details') :></h2>
<dl class="properties">
  : property(l('Type:'), $release.release_group.type.name);
  : property(l('Packaging:'), $release.packaging.name);
  : property(l('Status:'), $release.status.name);
  : property(l('Language:'), $release.language.name);
  : property(l('Script:'), $release.script.name);
  : if $release.quality != -1 {
  :   property(l('Data Quality:'), quality_name($release.quality))
  : }
</dl>

: if $release.labels {
  <h2><: l('Labels') :></h2>
  <ul class="links">
    : for $release.labels -> $release_label {
    <li>
      <: link_entity($release_label.label) :><br />
      <: $release_label.catalog_number :>
    : }
  </ul>
: }

<h2><: l('Rating') :></h2>
<p>
  : rating_stars($release.release_group, 0);
  : if $release.release_group.rating_count {
  :   '(' ~ raw('<a href="' ~ $c.uri_for_action('/release_group/ratings', [ $entity.release_group.gid ]) ~ '">') ~
  :           "see all ratings" ~ raw('</a>') ~
  :   ')'
  : }
</p>

: macro tag_list -> $tags, $more, $entity {
:   for $tags -> $tag {
:     if $~tag.index > 0 { ', ' }
:     $tag.name
:   }
: }

<script type="text/javascript">//<![CDATA[
  $(function() {
      MB.Control.TagEditor($('#sidebar-tags'), "<: raw($c.uri_for_action('/release/tag_async', [ $release.gid ])) :>",
          "<: raw($c.uri_for('/tag/')) :>",
          '<a href="<: raw($c.uri_for_action('/release/tags', [ $release.gid ])) :>">moreâ€¦<\/a>');
  });
//]]></script>

<div id="sidebar-tags">
  <h2><: l('Tags') :></h2>
  <p>
    <span class="tags">
      : tag_list($tags, $more, $entity);
      : if !$tags.size {
      :   l('(none)');
      : }
    </span>
  </p>
  : if $c.user_exists {
  :   if $no_javascript {
        <p><: link_entity($entity, 'tags', $tag_this_text) :></p>
  :   }
  :   else {
        <form>
          <input type="text" class="tag-input" value="<: $sidebar_user_tags.join(', ') :>" />
          <input type="submit" value="<: l('Tag') :>" />
        </form>
  :   }
  : }
</div>


: macro action -> $path, $name {
  <li>
    <a href="<: $c.uri_for_action($path, [ $release.gid ]) :>"><: $name :></a>
  </li>
: }

<h2><: l('Editing') :></h2>
<ul class="links">
  : if $c.user_exists {
  :   action('/release/edit_annotation',
  :          $release.latest_annotation.text
  :            ? l('Edit annotation')
  :            : l('Add annotation'));
  :   action('/release/change_quality', l('Change release quality'));
  :   action('/release/move', l('Change release group'));
      <li>
        <a href="<: $c.uri_for_action('/release/merge_queue', { 'add-to-merge' => $release.id }) :>">
          <: l('Merge release') :>
        </a>
      </li>
  :   action('/release/delete', l('Remove release'));

      <hr />

  :   if $c.session.relationship.id != $entity.id {
  :     my $text = $c.session.relationship
  :       ? l('Create relationship with {other}', { other => $c.session.relationship.name })
  :       : l('Use in a relationship');
  :     raw('<li><a href="' ~ $c.uri_for_action('/release/relate', [ $release.gid ]) ~ '">') ~ $text ~ raw('</a></li>');
  :   }
  :   if $c.session.relationship.id {
  :     my $text = l('Cancel creating relationship with {name}', { name => $c.session.relationship.name });
  :     raw('<li><a href="' ~ $c.uri_for_action('/release/cancel_relate', [ $release.gid ]) ~ '">') ~ $text ~ raw('</a></li>');
  :   }

      <li>
        <a href="#relate_to"><: l('Relate to ...') :></a>
        <div style="position: absolute;">
          <div class="relate-to" style="display: none">
            <input type="hidden" class="gid" value="<: $entity.gid :>" />
            <input type="hidden" class="type" value="<: entity_type($entity) :>" />
            <select style="width: 130px; margin-right: 4px;">
              <option value="artist"><: l('Artist') :></option>
              <option value="label"><: l('Label') :></option>
              <option value="recording"><: l('Recording') :></option>
              <option value="release-group"><: l('Release Group') :></option>
              <option value="release"><: l('Release') :></option>
              <option value="work"><: l('Work') :></option>
            </select>
            <span class="autocomplete">
              <img class="search" src="<: $c.uri_for("/static/images/icons/search.png") :>" />
              <input type="text" class="name" value="" style="width: 170px;" />
              <input type="hidden" class="id" value=""  />
              <input type="hidden" class="gid" value=""  />
            </span>
            <select class="endpoint">
              : for ['release', 'recording'] -> $endpoint {
                <option value="<: $endpoint :>">
                  : given ($endpoint) {
                  :   when('release') { l('Relate to release') }
                  :   when('recording') { l('Relate to recordings') }
                  : }
                </option>
                : }
            </select>
            <br />
            <div class="buttons" style="margin-top: 0.5em; width: 100%;">
              <input class="negative button cancel" type="button" value="<: l('Cancel') :>" style="float: left;" />
              <input class="positive button create" type="button" value="<: l('Create relationship') :>" style="float: right;" />
            </div>
          </div>
        </div>
      </li>

      <li>
        : my $uri = $c.uri_for_action('/edit/relationship/create_url', {
        :               type => entity_type($entity),
        :               entity => $entity.gid
        :           });
        <a href="<: $c.uri_for_action('/edit/relationship/create_url',
                        { type => 'release', entity => $release.gid }) :>"><: l('Relate to URL') :></a>
      </li>

      <li>
        <a href="<:
            $c.uri_for_action('/edit/relationship/create_batch', {
                type => $c.session.relationship.type0,
                gid => $c.session.relationship.entity0,
                release => $release.gid
            })
          :>">
          <: l('Relate {what} to recordings',
          { what => $c.session.relationship.name || '' }) :>
        </a>
      </li>

      <hr />

      : if $release.edits_pending {
        <li>
          <a href="<: $c.uri_for_action('/release/open_edits', [ $release.gid ]) :>"><: l('Open edits') :></a>
        </li>
      : }
      <li>
        <a href="<: $c.uri_for_action('/release/edits', [ $release.gid ]) :>"><: l('Editing history') :></a>
      </li>
  : }
  : else {
      <li>
        <a href="<: $c.uri_for_action('/user/login', { uri => $c.req.query_params.uri ||
                                                              $c.relative_uri }) :>"
           ><: l('Log in to edit') :></a>
      </li>
  : }
</ul>

: if $c.user_exists {
  <h2><: l('Collections') :></h2>
  <ul class="links">
    : for $collections -> $collection {
      <li>
        : if $containment[ $collection.id ] {
          <a href="<: $c.uri_for_action("/collection/remove", [$collection.gid], { release => $release.id }) :>">
            : if $collections.size == 1 {
            :   l('Remove from my collection');
            : }
            : else {
            :   l('Remove from {collection}', { collection => $collection.name });
            : }
          </a>
        : }
        : else {
          <a href="<: $c.uri_for_action("/collection/add", [$collection.gid], { release => $release.id }) :>">
            : if $collections.size == 1 {
            :   l('Add to my collection');
            : }
            : else {
            :   l('Add to {collection}', {collection => $collection.name });
            : }
          </a>
        : }
      </li>
    : }
    : else {
      <li><: l("You have no collections!") :></li>
    : }
    <li><a href="<: $c.uri_for_action("/collection/create") :>"><: l('Create a new collection') :></a></li>
    <li>
      <a href="<: $c.uri_for_action('/release/collections', [ $release.gid ]) :>">
        <: ln('Found in {num} user collection', 'Found in {num} user collections',
              $all_collections.size || 0, { num => $all_collections.size || 0 }) :>
      </a>
    </li>
  </ul>
: }

<h2><: l('External links') :></h2>
<ul class="external_links">
  <: display_favicons($entity, 1) :>
</ul>
: if $entity.isa('MusicBrainz::Server::Entity::Release') {
:   my $release_group_links = display_favicons($entity.release_group, 0);
:   if $release_group_links {
      <h2><: l('Release group external links') :></h2>
      <ul class="external_links"><: $release_group_links :></ul>
:   }
: }

: my $soundunwound='http://www.soundunwound.com/music/release' ~ $release.artist_credit.name ~
:                                             '/' ~ $release.name ~
:                                             '/mb:' ~ $release.gid;

<div id="sidebar-affiliates">
  <h2><: l('Affiliate links') :></h2>
  <ul class="external_links">
    <li id="sidebar-affiliates-soundunwound">
      <: raw(l('{uri|Search on SoundUnwound}', { uri => $soundunwound })) :>
    </li>
  </ul>
</div>

: if $entity.last_updated {
    <p class="lastupdate">
      <: l('Last updated on {date}', { date => format_user_date($c.user, $entity.last_updated) }) :></p>
: }

: }
